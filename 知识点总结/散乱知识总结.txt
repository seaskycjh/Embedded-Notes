
大端，小端，网络字节序：
	网络字节序其实就是大端字节序，为了统一通信标准，都统一转换为相同字节序。
	htons，htonl，ntohs,ntohl，主机序与网络字节序的转换函数。
	大端字节序：低地址存高位，高地址存地位，更直观。
	小端字节序：低地址存低位，高地址存高位，更符合人类思维。

如何判断大端小端字节序：
	测试大小端一般使用union的特性。union是一个联合体，所有变量公用一块内存，只是在不同的时候解释不同。
	其在内存中存储是按最长的那个变量所需要的位数来开辟内存的。

	union test_t {
		int32_t num;
		char s;
	};

	int main()
 	{
		test_t test;
		test.num = 0x01020304;
		if (s == 0x01) {
			printf("big\r\n");
		} else {
			printf("little\r\n");
		}
	}

	指针方法：
		int num = 1;
		char tmp = *((char *)&num);
		if (tmp) 小端
		else    大端


优先级翻转问题：
	就是高优先级任务要访问共享资源，而此时低优先级任务正在占用，此时中等优先级任务到来先执行完毕后，低优先级任务释放资源高优先级
	任务才得以执行，这就发生了优先级翻转问题。

	解决方式：
		优先级天花板，优先级继承
		优先级天花板：
			当任务申请某资源时就将当前任务的优先级提高到可访问该资源任务的最高优先级。
		优先级继承：
			当任务申请某资源时，此资源已被占用，那么判断当前任务是否比占用资源的任务优先级高，若高则将占用资源任务的优先级
			提高到当前任务的优先级，等释放资源后再恢复其本身的优先级。




























